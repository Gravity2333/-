#include <stdio.h>
/*
时间复杂度：
平均：O(n^2)
最好：O(n)
最坏: O(n^2)
最坏次数:n(n-1)/2
空间复杂度：O(1)
稳定性:稳定
*/
void Bubble_Sort(int k[],int n)
{
	int temp;
	bool finish=false;
	for(int i=0;i<n;i++)
	{
		finish=false;
		for(int j=0;i<n-i;j++)
		{
			if(k[i]>k[i+1])
			{
				temp=k[i];
				k[i]=k[i+1];
				k[i+1]=temp;
				finish=true;
			}
		}
		if(false==finish)
		{
			break;
		}
	}
}

/*
时间复杂度：
平均：O(n^2)
最好：O(n)
最坏: O(n^2)
正常次数:n(n-1)/2
空间复杂度：O(1)
稳定性:不稳定
*/
void Select_Sort(int k[],int n)
{
	int temp;
	int min;
	for(int i=0;i<n;i++)
	{
		min=i;
		for(int j=i+1;j<n;j++)
		{
			if(k[min]>k[j])
			{
				min=j;
			}
		}
		temp=k[min];
		k[min]=k[i];
		k[i]=temp;
	}
}
/*
时间复杂度：
平均：O(n^2)
最好：O(n)
最坏: O(n^2)
最坏次数:n(n-1)/2
空间复杂度：O(1)
稳定性:稳定
*/
void Insert_Sort(int k[],int n)
{
	int temp,j;
	for(int i=0;i<n-1;i++)
	{
		if(k[i]>k[i+1])
		{
			temp=k[i+1];
			j=i;
			while(k[j]>temp)
			{
				k[j+1]=k[j];
				j--;
			}
			k[j+1]=temp;  //这里面j已经是小于或者等于temp的了
			//所以要插入到后面
		}
	}
	
}

int biSearch(int k[],int n,int key)
{
	int low=0;
	int high=n-1;
	int mid;
	while(low<high)
	{
		mid=(low+high)/2;
		if(k[mid]>key)
		{
			//key 在mid+1和high之间
			low=mid+1;
		}
		else if(k[mid]<key)
		{
			//key 在low和mid-1之间
			high=mid-1;
		}
		else if(k[mid]==key)
		{
			//key就是当前mid对应的值
			return mid;
		}
	}
	return false;//循环结束（low>=high）还没找到，那么返回false；
}

void biSearch_Insert_Sort(int k[],int n)
{
	//折半插入排序的原理就是，将查找插入位置的部分换为二叉查找
	int temp;
	int low=0;
	int mid=0;
	int high=0;
	for(int i=1;i<n-1;i++)
	{
		high=i;
		temp=k[i];
		while(low<=high)
		{
			mid=(low+high)/2;
			if(k[mid]<temp)
			{
				low=mid+1;
			}
			else if(k[mid]>temp)
			{
				high=mid-1;
			}
		}
		for(int j=i-1;j>=low;j--)
		{
			k[j+1]=k[j];
		}
		k[low]=temp;
	}
}
/*
时间复杂度：
平均：O(n^1-3)
最好：O(n)
最坏: O(n^2)
空间复杂度：O(1)
稳定性:不稳定
*/
void Shell_Sort(int k[],int n)
{
	int gap=n;
	int temp=0,j=0;
	do{
		gap=gap/3+1;
		for(int i=gap;i<n;i++)
		{
			if(k[i]<k[i-gap]){
				temp=k[i];
					for(j=i-gap;j>=0&&k[j]>temp;j-=gap)
					{
						K[j+gap]=k[j];
					}
				k[j+gap]=temp;
				}
		}
	}while(gap>1)
}

/*
堆排序HeapSort使用三个函数：
HeapSort() 主函数
swap() 交换函数，负责交换数组里面的内容
HeapAdjust() 堆调整函数，负责每次交换之后数据的调整

这里面构造大顶堆 也就是层序遍历每一层的元素都小于上面一层
顶层元素最大 底层元素最小 并且使用满二叉树 数组0位不用，从1开始index
这样的目的是 满足（满）二叉树的性质 即： 顶点*2 = lchild  顶点*2+1 = rchild
|0|1|2|3|4|
时间复杂度：
平均：O(log2n)
最好：O(log2n)
最坏: O(log2n)
空间复杂度：O(1)
稳定性:不稳定
*/
void swap(int k[],int k;int j)
{
//交换数组内两个元素 
	int temp=0;
	temp=k[i];
	k[i]=k[j];
	k[j]=temp;
}

void HeapAdjust(int k[],int s,int n)
{
	//调整成大顶堆
	int temp=s;
	for(int i=2*s;i<n;i*=2)
	{
		if(i<n&&k[i]<k[i+1]) //注意这里要加i<n的条件，保证到最后一个元素不越界
		{
			//这里面一直找两个孩子里最大的
			i++;
		}
		if(k[i]<temp)
			break;//如果两个孩子里面最大的都小于temp，那么不用比了
			//因为剩下的下面的结点都会更小 
		k[s]=k[i];
		s=i;
	}
	k[s]=temp;
}

void Heap_Sort(int k[],int n)
{
	//堆排序
	for(int i=n/2;i>0;i--)
	{
		//从下往上调堆
		HeapAdjust(k,i,n);
	}
	//调整之后，进行排序
	for(int i=0;i<n;i++)
	{
		swap(k,1,n-i);
		//先交换，再调堆
		HeapAdjust(k,1,n-i-1);
	}
}
/*
归并排序需要两个函数
1.Merging();
2.Merge_Sort();
时间复杂度
平均：O(log2n)
最好：O(log2n)
最坏: O(log2n)
空间复杂度：O(n)
稳定性:稳定
*/
#define MAXSIZE 20
void Merging(int* list1,int list1_size,int*list2,int list2_size)
{
	int temp[MAXSIZE];
	//定义一个用来交换的数组
	int i=0,j=0,k=0;
	//定义两个指向两个数列的指针,以及一个指向temp数组的指针
	while(i<list1_size&&j<list2_size)
	{
		if(list1[i]<list2[j])
		{
			temp[k]=list1[i];
			i++;
			k++;
		}
		else if(list2[j]<list1[i])
		{
			temp[k]=list2[j];
			j++;
			k++;
		}
		else if(list1[i]==list2[j])
		{
			temp[k]=list1[i];
			i++;
			k++;
			j++;
		}
	}
	while(i<list1_size)
	{
		temp[k]=list1[i];
		k++;
		i++;
	}
	while(j<list2_size)
	{
		temp[k]=list2[j];
		j++;
		k++;
	}
	//将temp赋值给list1，因为list1最后连接着k
	for(int m=0;m<list1_size+list2_size;n++)
	{
		list1[n]=temp[n];
	}
}

void Merge_Sort(int k[],int n)
{
	int*list1=k;
	int list1_size=n/2;
	int* list2=k+n/2;
	int list2_size=n-list1_size;
	
	//递归拆分
	Merge_Sort(list1,list1_size);
	Merge_Sort(list2,list2_size);
	Merging(list1,list1_size,list2,list2_size);
}

/*
快速排序需要的函数
1._swap();
2.QuickSort();
时间复杂度 
平均:O(nlog2n) 
最好:O(nlog2n) 数组无序的时候
最坏:O(n^2) 数组全部有序的时候，退化成冒泡排序
空间复杂度：O(log2n)
稳定性：不稳定
*/
void _swap(int k[],int i,int j)
{
	int temp=0;
	temp=k[i];
	k[i]=k[j];
	k[j]=temp;
}

void QuickSort(int k[],int n)
{
	int temp;
	int start=0;
	int end = n-1;
	temp=k[0];
	while(start!=end)
	{
		while(start<end&&k[end]>temp)
		{
			end--;
		}
		_swap(k,start,end);
		while(start<end&&k[start]<temp)
		{
			start++;
		}
		_swap(k,start,end);
	}
}
